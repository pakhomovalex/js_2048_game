{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ const $a5fd07fa01589658$var$startMessage = document.querySelector(\".message-start\");\nconst $a5fd07fa01589658$var$loseMessage = document.querySelector(\".message-lose\");\nconst $a5fd07fa01589658$var$winMessage = document.querySelector(\".message-win\");\nclass $a5fd07fa01589658$var$Game {\n    #DEFAULT_STATE = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    // #DEFAULT_STATE = [\n    //   [1, 1, 1, 1],\n    //   [2, 2, 2, 2],\n    //   [3, 3, 3, 3],\n    //   [0, 0, 0, 0],\n    // ];\n    // #DEFAULT_STATE = [\n    //   [1, 1, 1, 1],\n    //   [2, 2, 2, 2],\n    //   [0, 0, 0, 0],\n    //   [0, 0, 0, 0],\n    // ];\n    #copyState(state) {\n        return state.map((arr)=>[\n                ...arr\n            ]);\n    }\n    constructor(initialState = this.#copyState(this.#DEFAULT_STATE)){\n        this.matrix = initialState;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    moveLeft() {\n        if (this.getStatus() !== \"playing\") return;\n        let isChange = false;\n        this.matrix = this.matrix.map((group)=>{\n            for(let i = 1; i < 4; i++)while(group[i - 1] === 0 && group[i] !== 0){\n                group[i - 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            for(let i = 1; i < group.length; i++)if (group[i] === group[i - 1] && group[i] !== 0) {\n                group[i - 1] = group[i] + group[i - 1];\n                this.score += group[i - 1];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            for(let i = 1; i < 4; i++)while(group[i - 1] === 0 && group[i] !== 0){\n                group[i - 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            return group;\n        });\n        if (isChange) this.createRandomTile();\n        this.drawTiles();\n        this.getStatus();\n        this.winOrLose();\n    }\n    moveRight() {\n        if (this.getStatus() !== \"playing\") return;\n        let isChange = false;\n        this.matrix = this.matrix.map((group)=>{\n            for(let i = 2; i >= 0; i--)while(group[i + 1] === 0 && group[i] !== 0){\n                group[i + 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i++;\n            }\n            for(let i = group.length - 2; i >= 0; i--)if (group[i] === group[i + 1] && group[i] !== 0) {\n                group[i + 1] = group[i] + group[i + 1];\n                this.score += group[i + 1];\n                group[i] = 0;\n                isChange = true;\n                i++;\n            }\n            for(let i = 2; i >= 0; i--)while(group[i + 1] === 0 && group[i] !== 0){\n                group[i + 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i++;\n            }\n            return group;\n        });\n        if (isChange) this.createRandomTile();\n        this.drawTiles();\n        this.getStatus();\n        this.winOrLose();\n    }\n    moveUp() {\n        if (this.getStatus() !== \"playing\") return;\n        let isChange = false;\n        const slidedMatrix = this.getMatrixGroupedByCols().map((group)=>{\n            for(let i = 1; i < 4; i++)while(group[i - 1] === 0 && group[i] !== 0){\n                group[i - 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            for(let i = 1; i < group.length; i++)if (group[i] === group[i - 1] && group[i] !== 0) {\n                group[i - 1] = group[i] + group[i - 1];\n                this.score += group[i - 1];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            for(let i = 1; i < 4; i++)while(group[i - 1] === 0 && group[i] !== 0){\n                group[i - 1] = group[i];\n                group[i] = 0;\n                isChange = true;\n                i--;\n            }\n            return group;\n        });\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)this.matrix[i][j] = slidedMatrix[j][i];\n        if (isChange) this.createRandomTile();\n        this.drawTiles();\n        this.getStatus();\n        this.winOrLose();\n    }\n    moveDown() {\n        if (this.getStatus() !== \"playing\") return;\n        let isChange = false;\n        const slidedMatrix = this.getMatrixGroupedByCols().map((group)=>{\n            for(let i = 2; i >= 0; i--)while(group[i + 1] === 0 && group[i] !== 0){\n                isChange = true;\n                group[i + 1] = group[i];\n                group[i] = 0;\n                i++;\n            }\n            for(let i = group.length - 2; i >= 0; i--)if (group[i] === group[i + 1] && group[i] !== 0) {\n                isChange = true;\n                group[i + 1] = group[i] + group[i + 1];\n                this.score += group[i + 1];\n                group[i] = 0;\n                i++;\n            }\n            for(let i = 2; i >= 0; i--)while(group[i + 1] === 0 && group[i] !== 0){\n                isChange = true;\n                group[i + 1] = group[i];\n                group[i] = 0;\n                i++;\n            }\n            return group;\n        });\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)this.matrix[i][j] = slidedMatrix[j][i];\n        if (isChange) this.createRandomTile();\n        this.drawTiles();\n        this.getStatus();\n        this.winOrLose();\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.matrix;\n    }\n    getStatus() {\n        switch(this.status){\n            case \"idle\":\n                $a5fd07fa01589658$var$startMessage.classList.remove(\"hidden\");\n                $a5fd07fa01589658$var$loseMessage.classList.add(\"hidden\");\n                $a5fd07fa01589658$var$winMessage.classList.add(\"hidden\");\n                break;\n            case \"playing\":\n                $a5fd07fa01589658$var$startMessage.classList.add(\"hidden\");\n                $a5fd07fa01589658$var$loseMessage.classList.add(\"hidden\");\n                $a5fd07fa01589658$var$winMessage.classList.add(\"hidden\");\n                break;\n            case \"win\":\n                $a5fd07fa01589658$var$winMessage.classList.remove(\"hidden\");\n                break;\n            case \"lose\":\n                $a5fd07fa01589658$var$loseMessage.classList.remove(\"hidden\");\n                break;\n            default:\n                break;\n        }\n        return this.status;\n    }\n    start() {\n        this.createRandomTile();\n        this.createRandomTile();\n        this.status = \"playing\";\n        this.getStatus();\n    }\n    restart() {\n        this.matrix = this.#copyState(this.#DEFAULT_STATE);\n        this.status = \"idle\";\n        this.getStatus();\n        this.clearMatrix();\n    }\n    // Add your own methods here\n    createRandomTile() {\n        const randomDigit = Math.random() < 0.9 ? 2 : 4;\n        const getEmptyTiles = [];\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.matrix[i][j] === 0) getEmptyTiles.push([\n                i,\n                j\n            ]);\n        }\n        const randomEmptyTile = Math.floor(Math.random() * getEmptyTiles.length);\n        const coordinateEmptyTile = getEmptyTiles[randomEmptyTile];\n        this.matrix[coordinateEmptyTile[0]][coordinateEmptyTile[1]] = randomDigit;\n        // edit HTML element\n        const getRowWithEmptyTile = document.querySelector(`.field-row:nth-child(${coordinateEmptyTile[0] + 1})`);\n        const emptyTile = getRowWithEmptyTile.querySelector(`.field-cell:nth-child(${coordinateEmptyTile[1] + 1})`);\n        emptyTile.textContent = randomDigit;\n        emptyTile.classList.add(`field-cell--${randomDigit}`);\n        emptyTile.style.transition = \".5s\";\n    }\n    getMatrixGroupedByCols() {\n        const groupedMatrix = this.#copyState(this.#DEFAULT_STATE);\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++)groupedMatrix[j][i] = this.matrix[i][j];\n        return groupedMatrix;\n    }\n    clearMatrix() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const getRow = document.querySelector(`.field-row:nth-child(${i + 1})`);\n            const tile = getRow.querySelector(`.field-cell:nth-child(${j + 1})`);\n            tile.textContent = \"\";\n            tile.className = \"field-cell\";\n        }\n    }\n    drawTiles() {\n        for(let i = 0; i < 4; i++)for(let j = 0; j < 4; j++){\n            const getRow = document.querySelector(`.field-row:nth-child(${i + 1})`);\n            const tile = getRow.querySelector(`.field-cell:nth-child(${j + 1})`);\n            tile.textContent = \"\";\n            tile.className = \"field-cell\";\n            if (this.matrix[i][j] !== 0) {\n                tile.textContent = `${this.matrix[i][j]}`;\n                tile.classList.add(`field-cell--${this.matrix[i][j]}`);\n            }\n        }\n    }\n    movesAvailable(grid) {\n        const size = grid.length;\n        // Check for empty cells\n        for(let row = 0; row < size; row++)for(let col = 0; col < size; col++){\n            if (grid[row][col] === 0) return true;\n        }\n        // Check for possible merges\n        for(let row = 0; row < size; row++)for(let col = 0; col < size; col++){\n            if (col < size - 1 && grid[row][col] === grid[row][col + 1]) return true; // horizontally\n            if (row < size - 1 && grid[row][col] === grid[row + 1][col]) return true; // vertically\n        }\n        return false;\n    }\n    winOrLose() {\n        if (!this.movesAvailable(this.matrix)) this.status = \"lose\";\n        for(let i = 0; i < 4; i++){\n            for(let j = 0; j < 4; j++)if (this.matrix[i][j] === 2048) this.status = \"win\";\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$startBtn = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$restartBtn = document.querySelector(\".restart\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\n// eslint-disable-next-line no-shadow\nconst $09e991522ca7e64e$var$arrowsToggle = (event)=>{\n    switch(event.key){\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            return;\n    }\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n};\n$09e991522ca7e64e$var$startBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$startBtn.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$restartBtn.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.start();\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$arrowsToggle);\n});\n$09e991522ca7e64e$var$restartBtn.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$restartBtn.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$startBtn.classList.remove(\"hidden\");\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.score = 0;\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.score;\n    document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$arrowsToggle);\n});\n\n\n//# sourceMappingURL=index.b0631d3a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst startBtn = document.querySelector('.start');\nconst restartBtn = document.querySelector('.restart');\n\nconst score = document.querySelector('.game-score');\n\n// eslint-disable-next-line no-shadow\nconst arrowsToggle = (event) => {\n  switch (event.key) {\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  score.textContent = game.score;\n};\n\nstartBtn.addEventListener('click', () => {\n  startBtn.classList.add('hidden');\n  restartBtn.classList.remove('hidden');\n\n  game.start();\n\n  document.addEventListener('keydown', arrowsToggle);\n});\n\nrestartBtn.addEventListener('click', () => {\n  restartBtn.classList.add('hidden');\n  startBtn.classList.remove('hidden');\n\n  game.restart();\n\n  game.score = 0;\n  score.textContent = game.score;\n\n  document.removeEventListener('keydown', arrowsToggle);\n});\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nconst startMessage = document.querySelector('.message-start');\nconst loseMessage = document.querySelector('.message-lose');\nconst winMessage = document.querySelector('.message-win');\n\nclass Game {\n  #DEFAULT_STATE = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  // #DEFAULT_STATE = [\n  //   [1, 1, 1, 1],\n  //   [2, 2, 2, 2],\n  //   [3, 3, 3, 3],\n  //   [0, 0, 0, 0],\n  // ];\n\n  // #DEFAULT_STATE = [\n  //   [1, 1, 1, 1],\n  //   [2, 2, 2, 2],\n  //   [0, 0, 0, 0],\n  //   [0, 0, 0, 0],\n  // ];\n\n  #copyState(state) {\n    return state.map((arr) => [...arr]);\n  }\n\n  constructor(initialState = this.#copyState(this.#DEFAULT_STATE)) {\n    this.matrix = initialState;\n\n    this.status = 'idle';\n\n    this.score = 0;\n  }\n\n  moveLeft() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    let isChange = false;\n\n    this.matrix = this.matrix.map((group) => {\n      for (let i = 1; i < 4; i++) {\n        while (group[i - 1] === 0 && group[i] !== 0) {\n          group[i - 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      for (let i = 1; i < group.length; i++) {\n        if (group[i] === group[i - 1] && group[i] !== 0) {\n          group[i - 1] = group[i] + group[i - 1];\n          this.score += group[i - 1];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      for (let i = 1; i < 4; i++) {\n        while (group[i - 1] === 0 && group[i] !== 0) {\n          group[i - 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      return group;\n    });\n\n    if (isChange) {\n      this.createRandomTile();\n    }\n\n    this.drawTiles();\n\n    this.getStatus();\n\n    this.winOrLose();\n  }\n  moveRight() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    let isChange = false;\n\n    this.matrix = this.matrix.map((group) => {\n      for (let i = 2; i >= 0; i--) {\n        while (group[i + 1] === 0 && group[i] !== 0) {\n          group[i + 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i++;\n        }\n      }\n\n      for (let i = group.length - 2; i >= 0; i--) {\n        if (group[i] === group[i + 1] && group[i] !== 0) {\n          group[i + 1] = group[i] + group[i + 1];\n          this.score += group[i + 1];\n          group[i] = 0;\n          isChange = true;\n          i++;\n        }\n      }\n\n      for (let i = 2; i >= 0; i--) {\n        while (group[i + 1] === 0 && group[i] !== 0) {\n          group[i + 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i++;\n        }\n      }\n\n      return group;\n    });\n\n    if (isChange) {\n      this.createRandomTile();\n    }\n\n    this.drawTiles();\n\n    this.getStatus();\n\n    this.winOrLose();\n  }\n  moveUp() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    let isChange = false;\n\n    const slidedMatrix = this.getMatrixGroupedByCols().map((group) => {\n      for (let i = 1; i < 4; i++) {\n        while (group[i - 1] === 0 && group[i] !== 0) {\n          group[i - 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      for (let i = 1; i < group.length; i++) {\n        if (group[i] === group[i - 1] && group[i] !== 0) {\n          group[i - 1] = group[i] + group[i - 1];\n          this.score += group[i - 1];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      for (let i = 1; i < 4; i++) {\n        while (group[i - 1] === 0 && group[i] !== 0) {\n          group[i - 1] = group[i];\n          group[i] = 0;\n          isChange = true;\n          i--;\n        }\n      }\n\n      return group;\n    });\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.matrix[i][j] = slidedMatrix[j][i];\n      }\n    }\n\n    if (isChange) {\n      this.createRandomTile();\n    }\n\n    this.drawTiles();\n\n    this.getStatus();\n\n    this.winOrLose();\n  }\n  moveDown() {\n    if (this.getStatus() !== 'playing') {\n      return;\n    }\n\n    let isChange = false;\n\n    const slidedMatrix = this.getMatrixGroupedByCols().map((group) => {\n      for (let i = 2; i >= 0; i--) {\n        while (group[i + 1] === 0 && group[i] !== 0) {\n          isChange = true;\n          group[i + 1] = group[i];\n          group[i] = 0;\n          i++;\n        }\n      }\n\n      for (let i = group.length - 2; i >= 0; i--) {\n        if (group[i] === group[i + 1] && group[i] !== 0) {\n          isChange = true;\n          group[i + 1] = group[i] + group[i + 1];\n          this.score += group[i + 1];\n          group[i] = 0;\n          i++;\n        }\n      }\n\n      for (let i = 2; i >= 0; i--) {\n        while (group[i + 1] === 0 && group[i] !== 0) {\n          isChange = true;\n          group[i + 1] = group[i];\n          group[i] = 0;\n          i++;\n        }\n      }\n\n      return group;\n    });\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        this.matrix[i][j] = slidedMatrix[j][i];\n      }\n    }\n\n    if (isChange) {\n      this.createRandomTile();\n    }\n\n    this.drawTiles();\n\n    this.getStatus();\n\n    this.winOrLose();\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.matrix;\n  }\n\n  getStatus() {\n    switch (this.status) {\n      case 'idle':\n        startMessage.classList.remove('hidden');\n        loseMessage.classList.add('hidden');\n        winMessage.classList.add('hidden');\n        break;\n      case 'playing':\n        startMessage.classList.add('hidden');\n        loseMessage.classList.add('hidden');\n        winMessage.classList.add('hidden');\n        break;\n      case 'win':\n        winMessage.classList.remove('hidden');\n        // document.removeEventListener('keydown', arrowsToggle);\n        break;\n      case 'lose':\n        loseMessage.classList.remove('hidden');\n        // document.removeEventListener('keydown', arrowsToggle);\n        break;\n      default:\n        break;\n    }\n\n    return this.status;\n  }\n\n  start() {\n    this.createRandomTile();\n    this.createRandomTile();\n\n    this.status = 'playing';\n\n    this.getStatus();\n  }\n\n  restart() {\n    this.matrix = this.#copyState(this.#DEFAULT_STATE);\n    this.status = 'idle';\n\n    this.getStatus();\n\n    this.clearMatrix();\n  }\n\n  // Add your own methods here\n\n  createRandomTile() {\n    const randomDigit = Math.random() < 0.9 ? 2 : 4;\n    const getEmptyTiles = [];\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.matrix[i][j] === 0) {\n          getEmptyTiles.push([i, j]);\n        }\n      }\n    }\n\n    const randomEmptyTile = Math.floor(Math.random() * getEmptyTiles.length);\n    const coordinateEmptyTile = getEmptyTiles[randomEmptyTile];\n\n    this.matrix[coordinateEmptyTile[0]][coordinateEmptyTile[1]] = randomDigit;\n\n    // edit HTML element\n    const getRowWithEmptyTile = document.querySelector(\n      `.field-row:nth-child(${coordinateEmptyTile[0] + 1})`,\n    );\n    const emptyTile = getRowWithEmptyTile.querySelector(\n      `.field-cell:nth-child(${coordinateEmptyTile[1] + 1})`,\n    );\n\n    emptyTile.textContent = randomDigit;\n    emptyTile.classList.add(`field-cell--${randomDigit}`);\n    emptyTile.style.transition = '.5s';\n  }\n\n  getMatrixGroupedByCols() {\n    const groupedMatrix = this.#copyState(this.#DEFAULT_STATE);\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        groupedMatrix[j][i] = this.matrix[i][j];\n      }\n    }\n\n    return groupedMatrix;\n  }\n\n  clearMatrix() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const getRow = document.querySelector(`.field-row:nth-child(${i + 1})`);\n        const tile = getRow.querySelector(`.field-cell:nth-child(${j + 1})`);\n\n        tile.textContent = '';\n        tile.className = 'field-cell';\n      }\n    }\n  }\n\n  drawTiles() {\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        const getRow = document.querySelector(`.field-row:nth-child(${i + 1})`);\n        const tile = getRow.querySelector(`.field-cell:nth-child(${j + 1})`);\n\n        tile.textContent = '';\n        tile.className = 'field-cell';\n\n        if (this.matrix[i][j] !== 0) {\n          tile.textContent = `${this.matrix[i][j]}`;\n          tile.classList.add(`field-cell--${this.matrix[i][j]}`);\n        }\n      }\n    }\n  }\n\n  movesAvailable(grid) {\n    const size = grid.length;\n\n    // Check for empty cells\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (grid[row][col] === 0) {\n          return true;\n        }\n      }\n    }\n\n    // Check for possible merges\n    for (let row = 0; row < size; row++) {\n      for (let col = 0; col < size; col++) {\n        if (col < size - 1 && grid[row][col] === grid[row][col + 1]) {\n          return true; // horizontally\n        }\n\n        if (row < size - 1 && grid[row][col] === grid[row + 1][col]) {\n          return true; // vertically\n        }\n      }\n    }\n\n    return false;\n  }\n\n  winOrLose() {\n    if (!this.movesAvailable(this.matrix)) {\n      this.status = 'lose';\n    }\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (this.matrix[i][j] === 2048) {\n          this.status = 'win';\n        }\n      }\n    }\n  }\n}\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$startMessage","document","querySelector","$a5fd07fa01589658$var$loseMessage","$a5fd07fa01589658$var$winMessage","$09e991522ca7e64e$var$game","DEFAULT_STATE","copyState","state","map","arr","constructor","initialState","matrix","status","score","moveLeft","getStatus","isChange","group","i","length","createRandomTile","drawTiles","winOrLose","moveRight","moveUp","slidedMatrix","getMatrixGroupedByCols","j","moveDown","getScore","getState","classList","remove","add","start","restart","clearMatrix","randomDigit","Math","random","getEmptyTiles","push","randomEmptyTile","floor","coordinateEmptyTile","emptyTile","getRowWithEmptyTile","textContent","style","transition","groupedMatrix","tile","getRow","className","movesAvailable","grid","size","row","col","$09e991522ca7e64e$var$startBtn","$09e991522ca7e64e$var$restartBtn","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$arrowsToggle","event","key","addEventListener","removeEventListener"],"version":3,"file":"index.b0631d3a.js.map"}